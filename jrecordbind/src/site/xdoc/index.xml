<document>
  <properties>
    <title></title>
    <author email="fridrik@java.net">Federico Fissore</author>
  </properties>
  <body>
  <style>
pre {
  overflow: auto;
  background: rgb(230, 230, 230);
  border: solid;
  border-width: thin;
  padding: 5px 10px;
  font-size: 8pt;
}

/* 
Title: Eclipse
Author: Luigi R. Viggiano
Copyright (c) 2006 NewInstance.it 
*/
pre.java span.string_constant {
  color: #2a00ff;
}

pre.java span.char_constant {
  color: #990000;
}

pre.java span.numeric_constant {
  color: #990000;
}

pre.java span.parenthesis {
  color: #000000;
}

pre.java span.code {
  color: #000000;
}

pre.java span.java_keyword {
  color: #7f0055;
  font-weight: bold;
}

pre.java span.java_primitive_type {
  color: #7f0055;
  font-weight: bold;
}

pre.java span.java_annotation {
  color: #646464;
}

pre.java span.comment_block {
  color: #3f7f5f;
}

pre.java span.comment_line {
  color: #3f7f5f;
}

pre.java span.comment_task_tag {
  color: #7f9fbf;
  font-weight: bold;
}

pre.java span.javadoc {
  color: #3f5fbf;
}

pre.java span.javadoc_keyword {
  color: #7f9fbf;
  font-weight: bold;
}

pre.java span.javadoc_html_tag {
  color: #7f7f9f;
}

pre.java span.line_number {
  padding-right: 5px;
  padding-top: 1px;
  margin-right: 2px;
  border-right: 1px solid #ddd;
  font-style: normal;
  color: #777;
}
</style>
    <section name="What's JRecordBind?">
      <p>A tiny and super fast library that aims to</p>
      <ul>
        <li>map a fixed or variable length text file to bean instances, ready to be chewed by an import procedure (Unmarshaller)</li>
        <li>and export record beans into a fixed or variable length text file (Marshaller).</li>
      </ul>
      <subsection name="Why?">
        <p>Almost everybody has written an import procedure of some sort: the customer is always filling your email box with data to import and that he doesn't want to manually type, despite your cool web interface.</p>
        <p>Fixed-length are a must for every public institution (at least in Italy): regardless of the age of the destination system, everyone can read a plain text file</p>
        <p>JRecordBind aims to leverage the boring parsing task and let the developer focus on real problems: understanding the data and find an easy way to feed the persistence layer.</p>
      </subsection>
      <subsection name="Advantages">
        <p>
          JRecordBind is (AFAIK) the only tool aimed at fixed-length files that's able to
          <strong>marshall and unmarshall</strong>. By the way you may be a producer of fixed length files, not just a consumer.
        </p>
        <p>
          JRecordBind supports
          <strong>hierarchical</strong>
          fixed length files: records of some type that are "sons" of other record types.
        </p>
        <p>
          JRecordBind uses
          <strong>XML Schema</strong>
          for the definition file: that could make your learning curve steeper.
        </p>
      </subsection>
      <subsection name="Which Java?">
        <p>
          Since version 2.3.3, JRecordBind supports both Java 1.5 and Java 6. For Maven users, you need to tweak the artifactId. See below.
        </p>
      </subsection>
      <subsection name="Support">
        <p>
          If you need support,
          <a href="mailto:fridrik@java.net">drop an email</a>. If you have found a bug,
          <a href="http://java.net/jira/browse/JRECORDBIND">file it! file it now!</a>
        </p>
      </subsection>
      <subsection name="Should I care?">
        <p>
          If you are a
          <strong>software developer</strong>,
          <strong>yes</strong>, you should. At least you should remind the existence of JRecordBind, for the time some customer of yours will ask you to "import this file from our host"
        </p>
      </subsection>
      <subsection name="How it works?">
        <subsection name="Record definition">
          <p>When you need to import a fixed-length file, someone has given you a wide documentation regarding how the file is structured: each field, its length, its value and how to convert it.</p>
          <p>JRecordBind needs that specification: it's the starting point. You need to map the documentation into an XSD file. Here's an example:</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xs:schema targetNamespace="http://schemas.jrecordbind.org/jrb/simple" xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://schemas.jrecordbind.org/jrb/simple" xmlns:jrb="http://jrecordbind.org/3/xsd"
  elementFormDefault="qualified" attributeFormDefault="unqualified"&gt;
  &lt;xs:complexType name="SimpleRecord"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="name" type="xs:string" jrb:length="20"/&gt;
      &lt;xs:element name="surname" type="xs:string" jrb:length="20"/&gt;
      &lt;xs:element name="taxCode" type="xs:string" jrb:length="16"/&gt;
      &lt;xs:element name="birthday" type="xs:date" jrb:length="8" jrb:converter="org.fissore.jrecordbind.test.SimpleRecordDateConverter"/&gt;
      &lt;xs:element name="oneInteger" type="xs:int" jrb:length="2"/&gt;
      &lt;xs:element name="oneFloat" type="xs:float" jrb:length="3" jrb:converter="org.fissore.jrecordbind.test.SimpleRecordFloatConverter"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
  &lt;xs:element name="main" type="SimpleRecord" jrb:length="100"/&gt;
&lt;/xs:schema&gt;
</pre>
<p>It's a standard XML Schema file (xsd) plus some custom attributes and a mandatory "main" element.<br />
The "main" element will be the starting point, the main bean JRecordBean will (un)marshall.</p>
The custom attributes are:
<table border="1">
  <tr>
    <td><strong>ATTRIBUTE</strong></td>
    <td><strong>SCOPE</strong></td>
    <td><strong>MEANING</strong></td>
    <td><strong>MANDATORY</strong></td>
  </tr>
  <tr>
    <td>jrb:length</td>
    <td>"main" element</td>
    <td>it's the total length of the fixed length file</td>
    <td>Yes. Can be omitted to obtain dynamic length files, if the "delimiter" attribute is specified</td>
  </tr>
  <tr>
    <td>jrb:length</td>
    <td>single elements</td>
    <td>the length of that particular field</td>
    <td>Yes. Can be omitted if the file has dynamic length</td>
  </tr>
  <tr>
    <td>jrb:delimiter</td>
    <td>"main" element</td>
    <td>what delimits each field</td>
    <td>No. It becomes mandatory only if you need dynamic length files</td>
  </tr>
  <tr>
    <td>jrb:padder</td>
    <td>"main" element</td>
    <td>the default padder when not specified</td>
    <td>No. JRecordBind will use its default (see the javadoc)</td>
  </tr>
  <tr>
    <td>jrb:padder</td>
    <td>single elements</td>
    <td>a custom padder for that field</td>
    <td>No. JRecordBind will use its default (see the javadoc)</td>
  </tr>
  <tr>
    <td>jrb:lineSeparator</td>
    <td>"main" element</td>
    <td>what ends each row</td>
    <td>No. By default a "new line" char will be used. DOS format files can be achieved with the value "&amp;#13;&amp;#10;"</td>
  </tr>
  <tr>
    <td>jrb:converter</td>
    <td>single elements</td>
    <td>how to convert that field to/from a string: there're some defaults</td>
    <td>No. JRecordBind will use its default (see the javadoc)</td>
  </tr>
  <tr>
    <td>jrb:row</td>
    <td>single elements</td>
    <td>if a bean is split into more than one row, from the second row on, you need to specify the current row number (zero based)</td>
    <td>No. JRecordBind will default it to 0 (the whole record on one line)</td>
  </tr>
  <tr>
    <td>jrb:subclass</td>
    <td>xs:complexType declaration</td>
    <td>if you need to extend/override some generated bean, you can make JRecordBind instantiate a particular class instead of the one it generates. The specified class must extend the generated class. See below for an example</td>
    <td>No. JRecordBind will default to its generated class</td>
  </tr>
  <tr>
    <td>jrb:setter</td>
    <td>xs:choice declaration</td>
    <td>if you are using jaxb bindings.xjb with the <strong>"globalBindings choiceContentProperty='true'"</strong> option active, you <strong>need</strong> to specify the name of the method jaxb has actually generated</td>
    <td>Yes, if you have set choiceContentProperty='true'. No, otherwise</td>
  </tr>
</table>
<p>When you are ready with your definition, generate the beans:</p>
<p>either you use the <a href="http://java.net/projects/maven-jaxb2-plugin">JAXB2 Maven plugin</a> (for an example configuration, give a look at the <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/pom.xml">test pom.xml</a>)</p>
<p>or an Ant target like the following</p>
<pre>
&lt;target name="regenerate"&gt;
  &lt;taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask"&gt;
    &lt;classpath refid="classpath" /&gt;
  &lt;/taskdef&gt;

  &lt;xjc destdir="${src.gen}" binding="bindings.xjb.xml"&gt;
    &lt;schema dir="${src.test}" includes="*.def.xsd" /&gt;
  &lt;/xjc&gt;
&lt;/target&gt;
</pre>
<p>You are now ready to (un)marshall your fixed length files</p>
</subsection>
<subsection name="Unmarshaller">
<p>Given an fixed-length text file, honoring the definition, for example</p>
<pre>WALTER              LIPPMANN            ABCDEF79D18K999A1889092381197
DAVID               JOHNSON             ABCDEF79E18S999B1889092381197
</pre>
<p>you can call the unmarshaller this way:</p>
<pre class="java"><span class="code">Unmarshaller&lt;SimpleRecord&gt; unmarshaller = <span class="java_keyword">new</span> Unmarshaller&lt;SimpleRecord&gt;<span class="parenthesis">(</span><span class="java_keyword">new</span> InputStreamReader<span class="parenthesis">(</span>
  SimpleRecordUnmarshallTest.<span class="java_keyword">class</span>.getResourceAsStream<span class="parenthesis">(</span><span class="string_constant">&quot;/simple.def.xsd&quot;</span><span class="parenthesis">)))</span>;

Iterator&lt;SimpleRecord&gt; iter = unmarshaller.unmarshall<span class="parenthesis">(</span><span class="java_keyword">new</span> InputStreamReader<span class="parenthesis">(</span>
  SimpleRecordUnmarshallTest.<span class="java_keyword">class</span>.getResourceAsStream<span class="parenthesis">(</span><span class="string_constant">&quot;simple_test.txt&quot;</span><span class="parenthesis">)))</span>;

assertTrue<span class="parenthesis">(</span>iter.hasNext<span class="parenthesis">())</span>;

SimpleRecord record = iter.next<span class="parenthesis">()</span>;
assertEquals<span class="parenthesis">(</span><span class="string_constant">&quot;JOHN                &quot;</span>, record.getName<span class="parenthesis">())</span>;
assertEquals<span class="parenthesis">(</span><span class="string_constant">&quot;SMITH               &quot;</span>, record.getSurname<span class="parenthesis">())</span>;
assertEquals<span class="parenthesis">(</span><span class="string_constant">&quot;ABCDEF88L99H123B&quot;</span>, record.getTaxCode<span class="parenthesis">())</span>;</span></pre>
<p>The presence of an <code>Iterator</code> assure you a very small memory footprint.</p>
</subsection>
<subsection name="Marshaller">
<p>Given a record bean full of data, you write:</p>
<pre class="java"><span class="code"><span class="comment_line">//some bean taken somewhere</span>
SimpleRecord record = <span class="java_keyword">new</span> SimpleRecord<span class="parenthesis">()</span>;
record.setName<span class="parenthesis">(</span><span class="string_constant">&quot;WALTER&quot;</span><span class="parenthesis">)</span>;
<span class="parenthesis">[</span>...<span class="parenthesis">]</span>

<span class="comment_line">//setting up the marshaller</span>

Marshaller&lt;SimpleRecord&gt; marshaller = <span class="java_keyword">new</span> Marshaller&lt;SimpleRecord&gt;<span class="parenthesis">(</span><span class="java_keyword">new</span> InputStreamReader<span class="parenthesis">(</span>
  SimpleRecordMarshallTest.<span class="java_keyword">class</span>.getResourceAsStream<span class="parenthesis">(</span><span class="string_constant">&quot;/simple.def.xsd&quot;</span><span class="parenthesis">)))</span>;

<span class="comment_line">//setting up the destination Writer</span>
Writer writer = <span class="java_keyword">new</span> StringWriter<span class="parenthesis">()</span>;

<span class="comment_line">//marshalling</span>
marshaller.marshall<span class="parenthesis">(</span>record, writer<span class="parenthesis">)</span>;
System.out.println<span class="parenthesis">(</span>writer.toString<span class="parenthesis">())</span>;</span></pre>
<p>and get the original input back</p>
</subsection>
</subsection>
<subsection name="How to: different record types">
<p>Hierarchical fixed-length files uses ID fields to differentiate the various records: you'll have something like "Record 000 is the address, record A01 are the vehicles..." and so on.</p>
<p>JRecordBind can easily recognize each record type if you use the xsd "fixed" standard attribute: <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/resources/hierarchical.def.xsd" target="_blank">see this example</a></p>
<p>I.E. you are telling JRecordBind that the "recordId" field, of type string and 3 chars long, will always have the "A00" fixed value</p>
</subsection>
<subsection name="How to: dynamic length files">
<p>Since version 2.1, you can omit the <strong>jrb:length</strong> attribute while specifying the <strong>jrb:delimiter</strong>: this way you can achieve <strong>dynamic</strong> field length.
<br/>
Click <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/resources/dynamicLength.def.xsd">here</a> for an xsd example</p>
</subsection>
<subsection name="How to: extending the generated bean">
<p>Since version 2.2 JRecordBind supports the jrb:subclass attribute at the xs:complexType level. By specifying the fully qualified name of a class extending the generated class, JRecordBind will instantiate that class instead of its generated one, allowing you to extend/override the generated class.
<br/>
Click <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/resources/generationGap.def.xsd">here</a> for an xsd example and <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/java/it/assist/jrecordbind/test/MyGGEnumRecord.java">here</a> for a class example.</p>
</subsection>
<subsection name="How to: using xs:choice with choiceContentProperty='true'">
<p>Since version 2.3, you can specify the <strong>jrb:setter</strong> attribute at the <strong>xs:choice</strong> level.
<br/>
JAXB allows you to have only one method in classes defined as "choice" in the xsd, but that's defined outside of the xsd, in a file called bindings.xjb (using the "choiceContentProperty" option). JRecordBind knows nothing about that file, so you need to duplicate that information into the xsd, in a way JRecordBind can understand.
<br/>
So, for instance, if you have the elements One and Two inside an xs:choice element, by default the generated choice class will have the methods "setOne" and "setTwo". Specifying choiceContentProperty=true in the bindings.xjb, that class will have the method "setOneOrTwo" only, screwing up JRecordBind. If you add the attribute "jrb:setter='oneOrTwo'" at the xs:choice level, JRecordBind won't be fooled by the JAXB trick.
<br/>
Click <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/resources/choiceWithCustomSetter.def.xsd">here</a> for an xsd example</p>
</subsection>
<subsection name="How to: fine grained control on file reading when unmarshalling">
<p>When the Unmarshaller reads from the file, by default it returns the current line.<br/>
Since version 2.3.3, if you want to customize this behaviour, you can create a new Unmarshaller passing your implementation of the LineReader interface.
<br/>
Check out <a href="http://java.net/projects/jrecordbind/sources/svn/content/trunk/jrecordbind-test/src/test/java/it/assist/jrecordbind/test/SimpleRecordUnmarshallNotPaddedLineReaderTest.java">this test</a> for an example</p>
</subsection>
<subsection name="How to: use a custom line separator (aka producing DOS format files)">
<p>Since version 2.3.4, you can customize the line separator using the attribute jrb:lineSeparator. By default, lines will be separated by a "new line" char (\n). If you want to produce DOS format files, specify the attribute this way</p>
<pre>jrb:lineSeparator="&amp;#13;&amp;#10;"</pre>
</subsection>
<subsection name="How to: removing the spaces from the unmarshalled string fields">
<p>When JRecordBind unmarshalls a file, it doesn't know if the spaces it finds in String properties are worth keeping or not, so it keeps them all.</p>
<p>If you are sure these spaces are just a headache and want to get rid of them, you could use the <a href="apidocs/it/assist/jrecordbind/util/Trimmer.html">Trimmer</a> utility object. Trimmer will look for String fields (adhering to the JavaBeans specification), get the value, trim it and set it back.</p>
<p>Trimmer is NOT recursive (it doesn't know anything about your object model), so it's up to you to make it work recursively.</p> 
</subsection>
<subsection name="Other examples">
<p>Each feature of JRecordBind has at least one xsd file that tests it.</p>
<p>Take a look at the
<a href="http://java.net/projects/jrecordbind/sources/svn/show/trunk/jrecordbind-test/src/test/resources">repository</a></p>
      </subsection>
      <subsection name="Where?">
        <p>
          JRecordBind comes precompiled against both Java 1.5 and Java 6. Java 6 is the default.
        </p>
        <p>
          Downloads are available from the
          <a href="http://java.net/projects/jrecordbind/downloads">download section</a>
        </p>
        <p>Maven users can add JRecordBind as a dependency. First you need to ensure you have the maven2 java.net repository in place</p>
        <p>Then add JRecordBind dependency</p>
        <p>Java 6 users will add:</p>
        <pre>
&lt;dependency&gt;
  &lt;groupId&gt;org.fissore.jrecordbind&lt;/groupId&gt;
  &lt;artifactId&gt;jrecordbind&lt;/artifactId&gt;
  &lt;version&gt;3.0.0-SNAPSHOT&lt;/version&gt;
&lt;/dependency&gt;</pre>
      </subsection>
    </section>
  </body>
</document>
